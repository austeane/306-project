dat
library(LiblineaR)
attach(dat)
dat$position=ifelse(dat$posSimp=='f',1,0)
dat=subset.data.frame(dat, select=-c(posSimp,position,AAV,Salary))
s=scale(dat,center=TRUE,scale=TRUE)
na.omit(t(dat))
x=subset.data.frame(dat, select=-c(Salary))
y=subset.data.frame(dat, select=Salary)
na.omit(dat)
n=nrow(y)
d=ncol(dat)
xTrain=as.data.frame(x[1:600,])
xTest=as.data.frame(x[601:840,])
yTrain=as.data.frame(y[1:600,1])
yTest=as.data.frame(y[601:840,1])
yTrain=as.data.frame(yTrain)
fullModel <- lm(SalaryLog~., data=dat)
summary(fullModel)
summary(fullModel)
install.packages("cvtools")
install.packages("cvTools")
library(cvTools)
set.seed(1234) # set seed for reproducibility
# set up folds for cross-validation
folds <- cvFolds(nrow(dat), K = 5, R = 10)
## compare LS, MM and LTS regression
# perform cross-validation for an LS regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
warning()
warnings()
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
warnings()
set.seed(1234) # set seed for reproducibility
# set up folds for cross-validation
folds <- cvFolds(nrow(dat), K = 5, R = 10)
## compare LS, MM and LTS regression
# perform cross-validation for an LS regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
# perform cross-validation for an MM regression model
fitLmrob <- lmrob(SalaryLog ~ ., data = dat)
cvFitLmrob <- cvLmrob(fitLmrob, cost = rtmspe,
folds = folds, trim = 0.1)
dat=subset.data.frame(dat, select=c(posSimp+Gm+Age+G+A1+A2+G60+A60+PenD+CF.+PDO+PSh.+ZSO.Rel+TOI.Gm+FF.))
dat=subset.data.frame(dat, select=c(posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm,FF.))
###Cross-validation: Leave-one-out, two-fold, five-fold.
#Download the "richmondcondo" data set from the course website.
#The description of it can be found in Lab 6
#Read in the data set#Or dat <- read.table("./Downloads/richmondcondo.txt", header=T, skip=2)
#Have a look at the data
library(cvTools)
dat = dat[,-c(1,2,4,6)]
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
dat = dat[which(dat$Salary > 0),]
dat$SalaryLog = log(dat$Salary)
dat[grep("D", dat$pos), "posSimp"] = "D"
dat$posSimp = "F"
dat = dat[,-c(1)]
library(leaps)
# Any 0 salaries should be removed I suppose
dat
library(LiblineaR)
attach(dat)
dat$position=ifelse(dat$posSimp=='f',1,0)
dat=subset.data.frame(dat, select=c(posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm,FF.))
dat=subset.data.frame(dat, select=-c(posSimp,position,AAV,Salary))
s=scale(dat,center=TRUE,scale=TRUE)
na.omit(t(dat))
x=subset.data.frame(dat, select=-c(Salary))
y=subset.data.frame(dat, select=Salary)
na.omit(dat)
n=nrow(y)
d=ncol(dat)
xTrain=as.data.frame(x[1:600,])
xTest=as.data.frame(x[601:840,])
yTrain=as.data.frame(y[1:600,1])
yTest=as.data.frame(y[601:840,1])
yTrain=as.data.frame(yTrain)
set.seed(1234) # set seed for reproducibility
# set up folds for cross-validation
folds <- cvFolds(nrow(dat), K = 5, R = 10)
## compare LS, MM and LTS regression
# perform cross-validation for an LS regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
# perform cross-validation for an MM regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
dat
dat
set.seed(1234) # set seed for reproducibility
# set up folds for cross-validation
folds <- cvFolds(nrow(dat), K = 5, R = 10)
## compare LS, MM and LTS regression
# perform cross-validation for an LS regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
#Download the "richmondcondo" data set from the course website.
#The description of it can be found in Lab 6
#Read in the data set#Or dat <- read.table("./Downloads/richmondcondo.txt", header=T, skip=2)
#Have a look at the data
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
library(cvTools)
dat = dat[,-c(1,2,4,6)]
dat = dat[which(dat$Salary > 0),]
dat$SalaryLog = log(dat$Salary)
dat$posSimp = "F"
dat[grep("D", dat$pos), "posSimp"] = "D"
dat = dat[,-c(1)]
library(leaps)
# Any 0 salaries should be removed I suppose
dat
library(LiblineaR)
attach(dat)
dat$position=ifelse(dat$posSimp=='f',1,0)
dat=subset.data.frame(dat, select=c(SalaryLog,posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm,FF.))
dat=subset.data.frame(dat, select=-c(posSimp,position,AAV,Salary))
s=scale(dat,center=TRUE,scale=TRUE)
na.omit(t(dat))
x=subset.data.frame(dat, select=-c(Salary))
y=subset.data.frame(dat, select=Salary)
na.omit(dat)
n=nrow(y)
d=ncol(dat)
xTrain=as.data.frame(x[1:600,])
xTest=as.data.frame(x[601:840,])
yTrain=as.data.frame(y[1:600,1])
yTest=as.data.frame(y[601:840,1])
yTrain=as.data.frame(yTrain)
set.seed(1234) # set seed for reproducibility
# set up folds for cross-validation
folds <- cvFolds(nrow(dat), K = 5, R = 10)
## compare LS, MM and LTS regression
# perform cross-validation for an LS regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
# perform cross-validation for an MM regression model
fitLmrob <- lmrob(SalaryLog ~ ., data = dat)
cvFitLmrob <- cvLmrob(fitLmrob, cost = rtmspe,
folds = folds, trim = 0.1)
# perform cross-validation for an LTS regression model
fitLts <- ltsReg(SalaryLog ~ ., data = dat)
dat
folds <- cvFolds(nrow(dat), K = 5, R = 10)
## compare LS, MM and LTS regression
# perform cross-validation for an LS regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
summary(fitLm)
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
summary(cvFitLm)
cvFitLm
fitLmrob <- lmrob(SalaryLog ~ ., data = dat)
cvFitLmrob <- cvLmrob(fitLmrob, cost = rtmspe,
folds = folds, trim = 0.1)
# perform cross-validation for an LTS regression model
fitLts <- ltsReg(SalaryLog ~ ., data = dat)
fitLts <- ltsReg(SalaryLog ~ ., data = dat)
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
summary(fitLm)
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
library(cvTools)
dat = dat[,-c(1,2,4,6)]
dat = dat[which(dat$Salary > 0),]
dat$SalaryLog = log(dat$Salary)
dat$posSimp = "F"
dat[grep("D", dat$pos), "posSimp"] = "D"
dat = dat[,-c(1)]
library(leaps)
# Any 0 salaries should be removed I suppose
dat
library(LiblineaR)
attach(dat)
dat$position=ifelse(dat$posSimp=='f',1,0)
dat=subset.data.frame(dat, select=c(SalaryLog,posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm))
dat=subset.data.frame(dat, select=-c(posSimp,position,AAV,Salary))
s=scale(dat,center=TRUE,scale=TRUE)
na.omit(t(dat))
x=subset.data.frame(dat, select=-c(Salary))
y=subset.data.frame(dat, select=Salary)
na.omit(dat)
n=nrow(y)
d=ncol(dat)
xTrain=as.data.frame(x[1:600,])
xTest=as.data.frame(x[601:840,])
yTrain=as.data.frame(y[1:600,1])
yTest=as.data.frame(y[601:840,1])
yTrain=as.data.frame(yTrain)
dat
set.seed(1234) # set seed for reproducibility
# set up folds for cross-validation
folds <- cvFolds(nrow(dat), K = 5, R = 10)
## compare LS, MM and LTS regression
# perform cross-validation for an LS regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
summary(fitLm)
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
cvFitLm
lol[1]=lm(SalaryLog ~ Age, data = dat)
lol=zeros(10)
lol=1
lol[1]=lm(SalaryLog ~ Age, data = dat)
fit=zeros(12)
fit=rep(0,12)
fit[1]=lm(SalaryLog ~ Age, data = dat)
fit[1]=cvLm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit[1]=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)
cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)
lol=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)
loll=lol$CV
lol
loll
loll=lol
loll
summary(lol)
type(lol)
typeof(lol)
lol
mode(lol)
mean(lol)
describe(lol)
lol$mean
lol$cv
lol=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
lol
fit[1]=lol
fit[1]=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[2]=cvLm(lm(SalaryLog ~ Age,,TOI.Gm data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[2]=cvLm(lm(SalaryLog ~ Age,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit=rep(0,15)
fit[15]=cvLm(lm(SalaryLog ~posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit=rep(0,15)
fit[1]=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[2]=cvLm(lm(SalaryLog ~ Age,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[15]=cvLm(lm(SalaryLog ~posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
lollll=1
fit[1]=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[2]=cvLm(lm(SalaryLog ~ Age,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[15]=cvLm(lm(SalaryLog ~posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[15]=cvLm(lm(SalaryLog ~Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[3]=cvLm(lm(SalaryLog ~ Age,TOI.Gm,posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[3]=cvLm(lm(SalaryLog ~ Age,TOI.Gm,posSimpF, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[3]=cvLm(lm(SalaryLog ~ Age,TOI.Gm,posSimpf, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[3]=cvLm(lm(SalaryLog ~ Age,TOI.Gm,posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
dat$posSimp=ifelse(dat$posSimp,1,0)
dat
set.seed(1234) # set seed for reproducibility
folds <- cvFolds(nrow(dat), K = 5, R = 10)
# set up folds for cross-validation
# perform cross-validation for an LS regression model
## compare LS, MM and LTS regression
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
fitLmrob <- lmrob(SalaryLog ~ ., data = dat)
# perform cross-validation for an MM regression model
cvFitLmrob <- cvLmrob(fitLmrob, cost = rtmspe,
folds = folds, trim = 0.1)
# perform cross-validation for an LTS regression model
folds = folds, trim = 0.1)
cvFitLts <- cvLts(fitLts, cost = rtmspe,
fitLts <- ltsReg(SalaryLog ~ ., data = dat)
# compare cross-validation results
cvSelect(LS = cvFitLm, MM = cvFitLmrob, LTS = cvFitLts)
## compare raw and reweighted LTS estimators for
## 50% and 75% subsets
# 50% subsets
fitLts50 <- ltsReg(SalaryLog ~ ., data = dat, alpha = 0.5)
cvFitLts50 <- cvLts(fitLts50, cost = rtmspe, folds = folds,
fit = "both", trim = 0.1)
# 75% subsets
fit=rep(0,15)
fit[1]=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[2]=cvLm(lm(SalaryLog ~ Age,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[3]=cvLm(lm(SalaryLog ~ Age,TOI.Gm,posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[2]=cvLm(lm(SalaryLog ~ Age,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[3]=cvLm(lm(SalaryLog ~ Age,TOI.Gm,posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
dat$posSimp=ifelse(dat$posSimp=='f',1,0)
dat=subset.data.frame(dat, select=c(SalaryLog,posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm))
dat=subset.data.frame(dat, select=-c(posSimp,position,AAV,Salary))
s=scale(dat,center=TRUE,scale=TRUE)
na.omit(t(dat))
x=subset.data.frame(dat, select=-c(Salary))
y=subset.data.frame(dat, select=Salary)
n=nrow(y)
na.omit(dat)
d=ncol(dat)
xTest=as.data.frame(x[601:840,])
xTrain=as.data.frame(x[1:600,])
yTest=as.data.frame(y[601:840,1])
yTrain=as.data.frame(y[1:600,1])
yTrain=as.data.frame(yTrain)
dat
dat$posSimp=ifelse(dat$posSimp,1,0)
dat$posSimp=ifelse(dat$posSimp,1,0)
dat
set.seed(1234) # set seed for reproducibility
dat
set.seed(1234) # set seed for reproducibility
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
library(cvTools)
dat = dat[,-c(1,2,4,6)]
dat = dat[which(dat$Salary > 0),]
dat$SalaryLog = log(dat$Salary)
dat[grep("D", dat$pos), "posSimp"] = "D"
dat = dat[,-c(1)]
library(leaps)
# Any 0 salaries should be removed I suppose
dat
library(LiblineaR)
attach(dat)
dat$position=ifelse(dat$posSimp=='f',1,0)
dat$posSimp=ifelse(dat$posSimp=='f',1,0)
dat$posSimp
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
dat$posSimp
library(cvTools)
dat = dat[,-c(1,2,4,6)]
dat$SalaryLog = log(dat$Salary)
dat = dat[which(dat$Salary > 0),]
dat[grep("D", dat$pos), "posSimp"] = "D"
dat = dat[,-c(1)]
library(leaps)
# Any 0 salaries should be removed I suppose
dat$posSimp
dat$posSimp
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
library(cvTools)
dat = dat[,-c(1,2,4,6)]
dat = dat[which(dat$Salary > 0),]
dat$SalaryLog = log(dat$Salary)
dat$posSimp
#dat$posSimp = "F"
dat$posSimp = "F"
dat$posSimp
dat$posSimp=ifelse(is.na(dat$posSimp),1,1)
dat$posSimp
#The description of it can be found in Lab 6
#Download the "richmondcondo" data set from the course website.
#Read in the data set#Or dat <- read.table("./Downloads/richmondcondo.txt", header=T, skip=2)
#Have a look at the data
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
library(cvTools)
dat = dat[,-c(1,2,4,6)]
dat = dat[which(dat$Salary > 0),]
dat[grep("D", dat$pos), "posSimp"] = "D"
dat = dat[,-c(1)]
# Any 0 salaries should be removed I suppose
dat
library(LiblineaR)
attach(dat)
dat=subset.data.frame(dat, select=c(SalaryLog,posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm))
dat$posSimp
dat$posSimp=ifelse(is.na(dat$posSimp),0,1)
dat$SalaryLog = log(dat$Salary)
library(leaps)
dat$posSimp=ifelse(is.na(dat$posSimp),0,1)
dat$posSimp
#Download the "richmondcondo" data set from the course website.
#The description of it can be found in Lab 6
#Read in the data set#Or dat <- read.table("./Downloads/richmondcondo.txt", header=T, skip=2)
#Have a look at the data
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
dat$posSimp
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
dat = dat[,-c(1,2,4,6)]
library(cvTools)
dat = dat[which(dat$Salary > 0),]
dat$SalaryLog = log(dat$Salary)
dat[grep("D", dat$pos), "posSimp"] = "D"
dat = dat[,-c(1)]
dat$posSimp
dat$posSimp="F"
dat[grep("D", dat$pos), "posSimp"] = "D"
dat$posSimp=ifelse(dat$posSimp=="F",1,0)
dat$posSimp
###Lab 8 Multiple Linear Regression
###Cross-validation: Leave-one-out, two-fold, five-fold.
#Download the "richmondcondo" data set from the course website.
#The description of it can be found in Lab 6
#Read in the data set#Or dat <- read.table("./Downloads/richmondcondo.txt", header=T, skip=2)
#Have a look at the data
dat = read.csv("../data/20160402-WarOnIce.csv", na.strings=c("NA", ""))
library(cvTools)
dat = dat[,-c(1,2,4,6)]
dat$SalaryLog = log(dat$Salary)
dat = dat[which(dat$Salary > 0),]
dat$posSimp="F"
dat[grep("D", dat$pos), "posSimp"] = "D"
dat = dat[,-c(1)]
library(leaps)
# Any 0 salaries should be removed I suppose
dat
library(LiblineaR)
attach(dat)
dat$posSimp
dat$posSimp=ifelse(dat$posSimp=="F",1,0)
dat$posSimp
dat=subset.data.frame(dat, select=c(SalaryLog,posSimp,Gm,Age,G,A1,A2,G60,A60,PenD,CF.,PDO,PSh.,ZSO.Rel,TOI.Gm))
dat=subset.data.frame(dat, select=-c(posSimp,position,AAV,Salary))
s=scale(dat,center=TRUE,scale=TRUE)
na.omit(t(dat))
x=subset.data.frame(dat, select=-c(Salary))
y=subset.data.frame(dat, select=Salary)
n=nrow(y)
na.omit(dat)
d=ncol(dat)
xTrain=as.data.frame(x[1:600,])
xTest=as.data.frame(x[601:840,])
yTrain=as.data.frame(y[1:600,1])
yTest=as.data.frame(y[601:840,1])
yTrain=as.data.frame(yTrain)
dat$posSimp=ifelse(dat$posSimp,1)
dat
set.seed(1234) # set seed for reproducibility
# set up folds for cross-validation
folds <- cvFolds(nrow(dat), K = 5, R = 10)
## compare LS, MM and LTS regression
# perform cross-validation for an LS regression model
fitLm <- lm(SalaryLog ~ ., data = dat)
cvFitLm <- cvLm(fitLm, cost = rtmspe,
folds = folds, trim = 0.1)
fitLmrob <- lmrob(SalaryLog ~ ., data = dat)
# perform cross-validation for an MM regression model
cvFitLmrob <- cvLmrob(fitLmrob, cost = rtmspe,
folds = folds, trim = 0.1)
fit=rep(0,15)
fit[1]=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[2]=cvLm(lm(SalaryLog ~ Age,TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[3]=cvLm(lm(SalaryLog ~ Age,TOI.Gm,posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
lm(SalaryLog ~ Age,TOI.Gm,posSimp, data = dat)
cvLm(lol,cost=rtmspe,folds=folds,trim=.1)
lol=lm(SalaryLog ~ Age,TOI.Gm,posSimp, data = dat)
cvLm(lol,cost=rtmspe,folds=folds,trim=.1)
lol=lm(SalaryLog ~ Age,TOI.Gm,posSimp, data = dat)
cvLm(lol,cost=rtmspe,folds=folds,trim=.1)
dim(dat$posSimp)
dim(dat$Age)
length(dat$Age)
length(dat$posSimp)
lol=lm(dat$SalaryLog ~ dat$Age,dat$TOI.Gm,dat$posSimp)
lol=lm(dat$SalaryLog ~ dat$Age+dat$TOI.Gm+dat$posSimp)
fit[3]=cvLm(lm(SalaryLog ~ Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[1]=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[2]=cvLm(lm(SalaryLog ~ Age+TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[3]=cvLm(lm(SalaryLog ~ Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[4]=cvLm(lm(SalaryLog ~ A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[8]=cvLm(lm(SalaryLog ~ ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[10]=cvLm(lm(SalaryLog ~ A60+GM+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[9]=cvLm(lm(SalaryLog ~ gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[9]=cvLm(lm(SalaryLog ~ Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[6]=cvLm(lm(SalaryLog ~ PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[7]=cvLm(lm(SalaryLog ~ A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[8]=cvLm(lm(SalaryLog ~ ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[9]=cvLm(lm(SalaryLog ~ Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[10]=cvLm(lm(SalaryLog ~ A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[12]=cvLm(lm(SalaryLog ~ CF.+PDO+A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[13]=cvLm(lm(SalaryLog ~ G60+CF.+PDO+A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
fit[14]=cvLm(lm(SalaryLog ~ P60+G60+CF.+PDO+A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)$cv
cvSelect(fit)
cvSelect(fit[1],fit[2])
argmax
argmax()
max(fit)
fit[1]=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit[2]=cvLm(lm(SalaryLog ~ Age+TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit[3]=cvLm(lm(SalaryLog ~ Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit[4]=cvLm(lm(SalaryLog ~ A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit[5]=cvLm(lm(SalaryLog ~ G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit[6]=cvLm(lm(SalaryLog ~ PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit1=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit2=cvLm(lm(SalaryLog ~ Age+TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)
cvSelect(fit1,fit2)
fit1=cvLm(lm(SalaryLog ~ Age, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit2=cvLm(lm(SalaryLog ~ Age+TOI.Gm, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit3=cvLm(lm(SalaryLog ~ Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit4=cvLm(lm(SalaryLog ~ A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit5=cvLm(lm(SalaryLog ~ G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit6=cvLm(lm(SalaryLog ~ PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit7=cvLm(lm(SalaryLog ~ A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit8=cvLm(lm(SalaryLog ~ ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit9=cvLm(lm(SalaryLog ~ Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit10=cvLm(lm(SalaryLog ~ A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit11=cvLm(lm(SalaryLog ~ PDO+A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit12=cvLm(lm(SalaryLog ~ CF.+PDO+A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit13=cvLm(lm(SalaryLog ~ G60+CF.+PDO+A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit14=cvLm(lm(SalaryLog ~ P60+G60+CF.+PDO+A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
fit15=cvLm(lm(SalaryLog ~ PenD+P60+G60+CF.+PDO+A60+Gm+ZSO.Rel+A1+PSh.+G+A1+Age+TOI.Gm+posSimp, data = dat),cost=rtmspe,folds=folds,trim=.1)
cvSelect(fit1,fit2)
cvSelect(fit1,fit2,fit3,fit4,fit5,fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
cvSelect(fit1,fit2,fit3,fit4,fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
cvSelect(fit1,fit2,fit3,fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
cvSelect(fit1,fit2,fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
cvSelect(fit1,fit2,fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
cvSelect(fit1,fit2,fit3,fit4,fit5,fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
cvSelect(fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
cvSelect(fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
cvSelect(fit1,fit2,fit3,fit4,fit5,fit6,fit7,fit8,fit9,fit10,fit11,fit12,fit13,fit14,fit15)
